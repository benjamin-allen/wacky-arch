ISA

There are 4 general-purpose registers: REG0, REG1, REG2, and CONST. Each register holds a 12-bit word.
The CPU also contains a Program Counter register to fetch instructions from.

+-+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| | Instruction Name    | Mnemonic  | Representation  | Shorthand Explanation    | Additional Notes                                                                                             |
+-+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|x| Add Register        | ADD       | 0000 xxyy 0000  | X = X + Y                |                                                                                                              |
|x| Subtract Register   | SUB       | 0000 xxyy 0001  | X = X - Y                |                                                                                                              |
|x| Multiply Register   | MUL       | 0000 xxyy 0010  | X = XY (bounded)         | i.e. X gets the lower bits of the multiplication (Todo: Can we make a way for Y to get the high bits sanely?)|
|x| Divide Register     | DIV       | 0000 xxyy 0011  | X = X / Y, Y = X % Y     | i.e. X gets the quotient, and Y gets the remainder.                                                          |
|x| Modulus Register    | MOD       | 0000 xxyy 0100  | X = X % Y                |                                                                                                              |
|x| Negate Register     | NEG       | 0000 --xx 0101  | X = -X                   |                                                                                                              |
|x| AND Register        | AND       | 0000 xxyy 1010  | X = X & Y                |                                                                                                              |
|x| OR Register         | OR        | 0000 xxyy 1011  | X = X | Y                |                                                                                                              |
|x| XOR Register        | XOR       | 0000 xxyy 1100  | X = X ^ Y                |                                                                                                              |
|x| NOT Register        | NOT       | 0000 --xx 1101  | X = !X                   |                                                                                                              |
| |                     |           |                 |                          |                                                                                                              |
|x| Shift Left          | SHL       | 0001 0-xx vvvv  | X = X << V               | New bits are all 0                                                                                           |
|x| Shift Right         | SHR       | 0001 10xx vvvv  | X = X >> V               | New bits are all 0                                                                                           |
|x| Shift Right Arith   | SHRA      | 0001 11xx vvvv  | X = X >> V               | New bits are all upper bit                                                                                   |
|x| Rotate Left         | ROTL      | 0010 0-xx vvvv  | X = X << V               | New bits take the value of the off-shifted bit                                                               |
|x| Rotate Right        | ROTR      | 0010 1-xx vvvv  | X = X >> V               | New bits take the value of the off-shifted bit                                                               |
| |                     |           |                 |                          |                                                                                                              |
|x| Move Register       | MOV       | 0011 xxyy 0000  | X = Y                    |                                                                                                              |
|x| Swap Register       | SWP       | 0011 xxyy 0001  | X = Y; Y = X             |                                                                                                              |
|x| Compare             | CMP       | 0011 xxyy 0010  | CONST = {1, 0, -1}       | 1 if X > Y, 0 if X = Y, -1 if X < Y                                                                          |
| |                     |           |                 |                          |                                                                                                              |
|x| Read Port           | READ      | 0100 0-xx pppp  | X = P                    | Where P is a port connected to X. If P does not exist, returns 0                                             |
|x| Write Port          | WRITE     | 0100 1-xx pppp  | X = P                    | Where P is a port connected to X.                                                                            |
| |                     |           |                 |                          |                                                                                                              |
|x| Jump                | JMP       | 0101 vvvv vvvv  | PC = PC + V              | Jumps to PC + V                                                                                              |
|x| Jump If Zero        | JEZ       | 0110 vvvv vvvv  | PC = PC + V              | Jumps to PC + V if CONST = 0                                                                                 |
|x| Jump If Greater     | JGZ       | 0111 vvvv vvvv  | PC = PC + V              | Jumps to PC + V if CONST > 0                                                                                 |
|x| Jump If Lesser      | JLZ       | 1000 vvvv vvvv  | PC = PC + V              | Jumps to PC + V if CONST < 0                                                                                 |
|x| Jump Address        | JA        | 1001 ---- --xx  | PC = X + V               | Jumps to X + V                                                                                               |
| |                     |           |                 |                          |                                                                                                              |
|x| Add Constant        | ADDC      | 1010 vvvv vvvv  | CONST = CONST + V        | V is assumed to be unsigned                                                                                  |
|x| Sub Constant        | SUBC      | 1011 vvvv vvvv  | CONST = CONST - V        | V is assumed to be unsigned                                                                                  |
|x| Mod Constant        | MODC      | 1100 vvvv vvvv  | CONST = CONST % V        | V is assumed to be unsigned                                                                                  |
|x| AND Constant        | ANDC      | 1101 vvvv vvvv  | CONST = CONST & V        | V's upper bit is extended                                                                                    |
|x| OR Constant         | ORC       | 1110 vvvv vvvv  | CONST = CONST | V        | V's upper bit is extended                                                                                    |
|x| Move Constant       | MOVC      | 1111 vvvv vvvv  | CONST = V                |                                                                                                              |
+-+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
